2019.11.26
조별 프로젝트 : 강의한 범위 내에서만 진행

##
Version Control System
버전에 대한 관리를 자동으로 처리하는 시스템

*  Server(=service 제공자)
   Client(= service 요청자)

1. 중앙 집중식
 - 각 클라이언트가 작업한 내용을 서버로 보냄(저장)
 - 필요 시 서버에서 가져옴
 [장점] : 서버만 잘 구성하면 됨(클라이언트의 역할은 서버와 연결)
 [문제] : 서버에 문제가 발생 시, 클라이언트 x
 ex) SVN, CVS

2. 분산식
 - Client 각자가 VCS 운영
 - 협업이 필요 시, 다른 Client와 연결
 [장점] : 작업한 내용에 대해 항상  VCS 가능
 ex) Git(각 로컬)  / GitHub(협업 시 서버 역할)

* FIle = 보조(2차) memory에 저장하는 단위
  확장자 = FIle이 실행가능한지 아닌지 확인
  com, msi, exe확장자 : 실행가능 file  
  //이 외에는 실행 안됨(실행 가능하지 않은 file)

=========================================================

1. d 드라이브에 workR 디렉터리 생성
2. 웹브라우저 실행(git-scm.com)
3. git 설치
C:\ProgramFile\Git
  //Users 밑에 설치하면 권한문제가 까다로워서 설치 x
 - choosing the default -> Use Visual Studio Code as Git's default editor
 -> vscode 설치 ->  git 설치 계속 next  -> cmd -> git --version 입력 ->설치 완료 확인

git 이용한 version 관리 절차

1. 관리할 디렉토리에서 
	git init	: 초기화   (최초 한 번)
	
	github.com 에서 가입

	git config --global user.email "e메일주소"

	git config --global user.name "github ID"

2. 버전관리할 대상 추가
	git add [file명]  : 추가
	* git add .  -> 현재 디렉토리 전체(불필요한 파일 삽입 가능)

	git status  : 상태확인

3. commit 수행
	git commit -m "설명" #한글도 가능
	
	git log : 사용 이력정보 확인

ㅇ 깃허브 데스크탑 -> Publish branch

https://desktop.github.com/   ------ 깃허브 데스크탑
cmd 환경이 아닌 프로그램에서 명령

git = version관리 툴

Local 영역 version 관리
- 내 pc
=> git 툴 사용


Global 영역 version 관리
- 다른 사용자에게 공개 목적
=> git, github 사용
=========================================================

 CLI(Command Line Interface) 환경을 구축해주는 utility = cmd
 명령어 : 드라이브 변경(d: , c: 등등)
	디렉토리 변경 (cd \폴더경로)   *Change Directory
	dir = 디렉토리 약자  / dir /w = 현재 디렉토리 요약
=========================================================
 Vscode 실행
settings -> 

font = https://github.com/naver/d2codingfont  /  https://sourcefoundry.org/hack/

==========================================================
##
1차 산업혁명 : 증기이용
2차 산업혁명 : 전기이용
3차 산업혁명 : 인터넷(웹) 이용
- 인터넷 1.0 시대 : 단순검색
- 인터넷 2.0 시대 : 사용자 참여 가능(게시판)
- 인터넷 3.0 시대 : 사용자에 의한 contents 생산(인스타)

4차 산업혁명
- IoT
- Big Data  => 목표: 이면의 현상 파악 (단순 데이터  패턴뿐만 아니라, 그 데이터의 의미, 패턴의 이유를 찾아야함)
- AI - Muchine Learning
- Block Chain

=========================================================================
##
Program Language 유형

                (<----------------------Compile 방식------------------------>)
Source Code ---------------> Object Code -----------------> Excute code -------------------> 결과
(source file)    Compiler         (Object file)      Linker              (Excute file)        Loader            |  
(text file)            |                (Binary file)         |  (Library file)  (실행가능 Binary file)                 |
Editor               |		 - 아직실행불가       |		        		                 | 
	       Syntax Error                       Link Error                                              Run-time Error
               (<-------------------------Interpreter 방식------------------->)
    
               copile 단계                            Link 단계                                실행 단계                                                   
         컴퓨터 관점으로 변경                사용가능하게 변환                                                                                              

1. Compile 방식
 - 실행 속도가 빠름
 - 번역을 한번에 다해놓고 실행
 - 변화를 줘야할 때, 처음부터 다시 처리 해야함
 - exe
 - editor, Compiler , linker , loader 파일이 따로 다 있음


2. Interpreter 방식
 - 실행속도가 느림
 - 매번 실행할때 마다 번역을 함 (동시 통역)
 - 간편함
 - 웹
 - Script 형태로 많이 사용함
 - editor, interpreter 파일만 있으면 가능 -> 하나만 실행해도 결과까지 바로 나옴
 - R=interpreter 파일  --> 컴파일 링크 실행까지 처리함

*  R 
1. interpreter 방식
2. Open Source
 open source 라이센서
 - GPL, LGPL  -> 배포시 강제로 소스 오픈
 - APL, MPL. BSD, Beerware -> 배포시 소프 오픈 의무 없음

================================================================
================================================================
================================================================
2019.11.27

##
Program Language

1. 개발환경 구축
2. 자료형(변수) ★★★★★
3. 연산자
   제어문
5. 함수     ]
   클레스  ] Library 	1. 제공되는  library(사용방법)
       알고리즘+자료구조--->2. 사용자 정의 library(작성)  
6. 입/출력
 입력 : memory에 기록
 출력 : memory 내용 출력


###
알고리즘 특징 
- ★유한성 : 프로그램이 반드시 끝나야함
- ★0개 이상의 입력 : 입력은 없을 수도 있음
- ★1개 이상의 출력 : 출력은 반드시 있음
- ★유효성 : 유효한 알고리즘이여야함
- 효과성 : 효과적

##
R의 Data type(자료형)

Computer system에서 사용하는 자료형 == 원시 자료형(Scalar형, 원자형)

1. 숫자

ㅇ 정수
ㅇ 실수
* 숫자와 문자를 구분하는 기준
- 산술 연산 가능 유무

2. 문자

3. 논리형
- True
- False

=================================================
##
변수 : 값을 저장 및 변경하는 기억장소

- 기능 
1. 값 쓰기 (L value)
2. 값 읽기 (R value)

R에서 변수
number      <-         10
(변수명) (치환연산자) (값)
	 ( or = )

L value  <-  R value
(치환연산자 기준)


변수의 의미
ㅇ 속성(Attribute)   * 속성 : 기억장소 모양
 1. 자료형( Data type)
 2. 기억장소 크기    * R, 파이썬은 기억장소의 크기를 알아서 결정(선언 x)
 3. 값 저장 방식
 - 4byte(32bit) = [1bit는 부호(0: +, 1:-)] + [31bit = 절댓값]
 4. 값의 범위
 - Overflow : 값이 최대 범위를 넘어감
 - Underflow : 값이 최소 범위를 넘어감

* Program
 1. 기억장소 확보
 2. 기억장소 내용을 Algorithm에 따라 읽기/쓰기 하여 결과 도출

ㅇ 연산(기능 ,동작)  * 연산 : 기억장소를 이용/변경하는 동작
 1. 읽기 기능(R value, 출력명령)
 2. 쓰기 기능(L value, 입력명령)
 3. 산술/관계/논리 연산
 * 연산자(operator) - 기호형태로 제공
- 산술연산(사칙연산)
 - 결과가 숫자
- 관계연산(대소비교)
 - 결과가 논리형
- 논리연산(또는/그리고)
 - 결과가 논리형

 * 연산 우선 순위
- 
변수 생성 방법
 1. 정적 자료형으로 생성
   (한번 자료형이 생성되면 바뀌지 않는 형태)
  -> Compile형 언어(C,C++,Java)


 2. 동적 자료형으로 생성
   (자료형이 생성되더라도 필요에따라 바뀌는 형태)
  -> Interpreter형 언어
      (Script-R,Python,Js)

 * Escape character
\n : 줄바꿈
\t : 탭간격

===============================================
##
제어 구조 : Program 실행 흐름 제어

ㅇ 순차 구조  : 명령어 나열

ㅇ 선택 구조  : if ~ else문 사용

ㅇ 반복 구조  : for. while문 사용
- for (i in 1:10)
-  1:10 반복 범위 / 1: 반복 시작 / 10 : 반복 끝 / i : 반복 1회째의 내용 저장
- while문 사용 시, 반복제어 변수 사용 필수
- break : 반복문 종료
- next : 다시 반복문 시작

* Package : 함수 Library 집합

================================================
================================================
================================================
2019.11.28

* Program 작성
1. 문제 정의/이해
2. 기억 장소 결정
3. Algorithm 결정 -> 제어 구조 이용
  (일처리순서)


* R 기본 자료형
 - 숫자
 - 문자
 - 논리
 - NULL : 아무것도 없음


=================================================
## 
함수(Function)  : 단위 기능을 수행하는 Code 집함(Block)
                    (하나의 기능)
- 반복적인 기능을 별도로 작성하기 위해서 함수 사용
                                                                                  
1. 내장함수(Library 함수)
 - R에서 제공하는 함수
 


2. 사용자 정의 함수
 - 제 3자 함수 -> 필요시 설치하여 사용
 - 사용자 정의 함수 

ㅇ 산술 내장 함수            				p.133
log(10) -> return 값
- 함수명 : log
- 인수 : 10 (0개 이상)
- return 값 : 함수 수행 결과로 되돌려 주는 것
               -> 1개 or 없음

* 상수(constant) : 고정된 값 = Literal
pi : 3.14159... 


ㅇ 사용자 함수 정의    				p.122~ 128
 함수명 <- function([인수 list]) {
 	 함수 내용 코드 작성
 	 return(되돌림값)
 }

ㅇ 함수의 유형 b 
1. 인수 없고, return이 없는 경우
2. 인수 있고, return이 없는 경우
3. 인수 없고, return이 있는 경우
4. 인수 있고, return이 있는 경우

====================================================
##
* Scalar(원시값) : 하나의 값(숫자,문자,논리)
- Scalar를 메모리에 저장하기 위해서 변수를 만듦


 Vector : 1차원 배열, 열의 집합, 동일자료형 집합  -> Scalar형 기억장소의 집합

a[2] -> a: vector / [2] : index

* 0 base Vector : 첫번째 인덱스를 0번(Python)
  1 base Vector : 첫번째 인덱스를 1번(R)

ㅇ Vector 생성 방법
 1. c함수 이용 c(1,2,3)
 2. : 이용  50:90
 3. seq 이용   seq(1,100,2) -> 1, 3, 5, 7 ...
 4. rep 이용   rep(1, times=5) -> 1,1,1,1,1


NA : 결측치(Missing Value) -> 읽을 수 없는 값
    - Not Available

NaN : 계산할 수 없음 - Not a Number

Inf : 무한대

p. 59~ 64 -> 벡터내용
+3

=====================================================
##
List : 다른 Data type의 자료를 저장하는 구조             P.72~75
      - key(변수) : value(값) 형식으로 저장

자료구조 <= Vector, List

ㅇ List
 - 값에 접근하려면 [[ ]] 두개를 사용해야함 ( 하나만 쓰면 key,value 같이 출력)
 - list의 key에 접근하려면 $를 사용 my_info 
 - 함수의 리턴값을 여러개로 출력가능
   return (list(sum = val_sum , mul = val_mul))

++++++++++++++++++++++++++++++++++++
ds <- c(90, 85, 70 ,84)
my_info <- list( name = 'Hong', age = 30, status = TRUE,
                 score = ds)
my_info
my_info[1]
my_info[[1]]
my_info$name
my_info[[4]]
+++++++++++++++++++++++++++++++++++++


Factor형 : 범위형 type  
 - 범위를 벗어난 값은 Error 일으킴
 - Factor형은 levels도 같이 출력됨(levels : 값의 범위)
 - levels에 포함되지 않는 data는 추가 불가능(NA로 생성됨)

* as로 시작하는 함수 : 변환함수 
   is로 시작하는 함수 : 논리함수


=====================================================
=====================================================
=====================================================
2019.11.29

##
* github & gitdesktop 사용

- git clone : github에 있는 것을 local로 가져올 수 있음(최초 1회)
- git push : local에 있는 내용을 github로 올림

ex) 교육실에서 작성한 내용(1)을 git push로 올림
-> 집에서 git clone을 사용해서 repository(1)를 가져옴
-> 집에서 추가 작성한 내용(2)을 git push로 올림
-> 교육실에서 git pull을 사용해 (2)가져옴


gitdesktop
-> repository(directory)를 하나 만들고, commit -> publish github
두번째부터는  commit -> push origin

변경된 내용을 불러올때
ex)집에서 작성한 내용을 교육장에서 볼때 -> repository pull 사용

=====================================================
##

- Scalar(값) -> 변수 -> Data type (숫자, 문자, 논리, NULL,  NA,     NaN,      Factor)
                                           [기본 자료형]    [없다][결측치][계산불가]  [범주형]                                               

[Scalar를 여러개 저장]
ㅇ 1차원 배열(동일 자료형 집합) -> Vector
ㅇ 1차원 배열(다른 자료형 집합) -> List

ㅇ 2차원 배열(행/열의 집합)    
   - 동일 자료형 집합         -> Matrix
   - 다른 자료형 집합         -> Data Frame 

 * 열 : 변수, 특성(feature)이라는 용어로 사용
   행 : 관측치(overvation) 

===================================================================
===================================================================
===================================================================
2019.12.02

##
read.xlsx() 함수 사용
- Java 개발환경 설치 필요

Java -> JDK(Java 개발환경) - Java Development Kit     	 =>JDK설치 시, JRE도 자동 설치
      -> JRE(Jave 실행 환경) - Java Run-tume Environment
1. Java로 개발 및 실행 -> JDK 설치
   Java로 실행만 -> JRE 설치

ㅇ Java Edition
1. SE(Standard Edition)

2. EE(Enterprise Edition)
 - 웹어플리케이션 만들때(주로 백엔드)
3. ME(Mobile Edition)
 - 모바일

ㅇ Java 설치
1. JDK 설치
2. O/S 별 환경 설정
 - 환경변수 path에 JDK 설치 위치 등록
 - 시스템 -> 시스템설정 -> 고급 시스템 설정 -> 환경 변수 -> 시스템 변수 칸에서 Path 찾기 
  -> 편집 -> 새로 만들기 -> jdk bin 폴더 주소 복사 및 c/v(C:\Program Files\Java\jdk1.8.0_231\bin)
  -> 맨위로 이동 -> 확인
 ==> cmd에서 javac -version  / java -version 확인
 ==== 환경 구축 끝

read.table() ->base              --- 일반 text
read.csv() -> base               --- csv text
read.xlsx() -> xlsx <== Java    --- xlsx file


=========================================================================
##
Data 분석 절차   : 현상을 분석하고, 이면을 찾는 과정

1. 문제 정의 ★
 - 데이터를 기반으로 현상에 대한 의문

2. Data 수집

3. Data 정제/전처리

4. Data 탐색  == 탐색적 Data 분석
 - 문제 정의와 부합되는지 확인
 - 데이터 수집 및 전처리 과정이 잘되었는지 확인
 - 탐색적 Data 분석을 통해 보고서 작성 가능 
====>	1. Data set에 대한 이해
	2. 문제 정의 검증
	3. 문제 정의에 대한 1차 결과 파악


5. Data 분석 == Data 모델 구축
 - 머신 러닝은 Data 모델 구축 활동
 - 변수간의 관계를 파악하고 어떤 패턴의 선(모델)을 발견하는 과정
 
6. 보고

* 3, 4, (5) 단계 : R, Python을 사용함  





Data의 종류    p.149~ (시각화 표현) 


1. 특성에 따른 분류(변수의 내용)
1.1 범주형(Categorical Data) 
   - 남여, 혈액형, 취미  
   - 산술 연산이 불가능한 타입, 거의 count를 함
   - 대부분 문자형으로 나타냄
   - R에서 factor로 표현 가능
1.2 연속형(Numerical Data)
   - 키, 몸무게, 나이
   - 산술 연산이 가능함
   - R에서 숫자형으로 표현 가능   

2. 변수 개수에 의한 분류
2.1 일변량(Univaridate Data)
   - 변수가 하나인 경우    
   - R에서 벡터로 표현 가능

2.2 다변량(Multivariadate Data)
    - 변수가 2개 이상 (다중변수)
    - 이변량(Bivariadate Data) : 변수가 2개
    - R에서 matrix , data frame으로 표현 가능

 * 상관분석  --> 산점도
 * 시계열 Data 분석 --> 선그래프(ex) 주식, 연도별 인구증가 추이)
 * 1.1 - 2.1 --> 막대그래프
 * 1.2 - 2.1 --> 히스토그램



* str()함수를 사용해서 변수의 타입 확인
 factor -> 범주형으로 사용 가능

=========================================================================
=========================================================================
=========================================================================
2019.12.03 (6일차)
##

ㅇ 상관관계
ㅇ 상관계수(r)
 - -1<r<1
 - 1, -1일때, 완전한 상관관계?
 - 보통 0.5 기준으로 상관 관계 높다 낮다 판단


상관분석 순서

1. 상관분석 대상 변수 선정
2. 산점도 작성 ( 관측값 분포 확인) : plot()
3. 회귀식 도출 : lm()
   (회귀식 : 두 변수의 선형관계를 가장 잘 나타낼 수 있는
 	   선의 식)
   (y = xw + b)
4. 회귀선을 산점도에 표시 : abline()
   (회귀선 : 관측값들의 추세를 가장 잘 나태할 수 있는 선)
5. 상관계수 계산 : cor()
6. 상관분석 결과 해석













































































